// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  password         String
  name             String?
  role             UserRole  @default(CUSTOMER)
  profile          Profile?
  orders           Order[]
  reviews          Review[]
  wishlist         Wishlist?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

enum UserRole {
  CUSTOMER
  ADMIN
  SUPERADMIN
}

model Profile {
  id               String   @id @default(cuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id])
  phone            String?
  address          String?
  city             String?
  state            String?
  country          String?
  postalCode       String?
}

model Wishlist {
  id               String    @id @default(cuid())
  userId           String    @unique
  user             User      @relation(fields: [userId], references: [id])
  items            WishlistItem[]
}

model WishlistItem {
  id               String    @id @default(cuid())
  wishlistId       String
  wishlist         Wishlist  @relation(fields: [wishlistId], references: [id])
  productId        String
  product          Product   @relation(fields: [productId], references: [id])
}

model Product {
  id               String        @id @default(cuid())
  name             String
  description      String
  price            Float
  stockQuantity    Int
  categoryId       String
  category         Category      @relation(fields: [categoryId], references: [id])
  images           ProductImage[]
  reviews          Review[]
  orderItems       OrderItem[]
  wishlistItems    WishlistItem[]
  
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model Category {
  id               String     @id @default(cuid())
  name             String     @unique
  description      String?
  products         Product[]
}

model ProductImage {
  id               String     @id @default(cuid())
  productId        String
  product          Product    @relation(fields: [productId], references: [id])
  imageUrl         String
  isPrimary        Boolean    @default(false)
}

model Order {
  id               String        @id @default(cuid())
  userId           String
  user             User          @relation(fields: [userId], references: [id])
  items            OrderItem[]
  totalPrice       Float
  status           OrderStatus   @default(PENDING)
  shippingAddress  String
  paymentMethod    String
  transactionId    String?
  createdAt        DateTime      @default(now())
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id               String      @id @default(cuid())
  orderId          String
  order            Order       @relation(fields: [orderId], references: [id])
  productId        String
  product          Product     @relation(fields: [productId], references: [id])
  quantity         Int
  price            Float
}

model Review {
  id               String      @id @default(cuid())
  userId           String
  user             User        @relation(fields: [userId], references: [id])
  productId        String
  product          Product     @relation(fields: [productId], references: [id])
  rating           Int
  comment          String?
  createdAt        DateTime    @default(now())
}